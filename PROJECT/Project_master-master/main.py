from datetime import datetime
from fasthtml.common import *
from create_instance import company
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app, rt = fast_app()
session = {}
app.mount("/static", StaticFiles(directory="./static"), name="static")

@rt("/")
def home():
    user_name = session.get("user_name")
    if user_name:
        return Html(
            Head(
                Link(rel="stylesheet", href="/static/styles.css")
            ),
            Body(
                Main(
                    Header(
                        H1(f"Welcome, {user_name} üöå"),
                        H2("Available Bus Schedules")
                    ),
                    Table(
                        Thead(
                            Tr(
                                Th("Schedule ID"),
                                Th("Route"),
                                Th("Price"),
                                Th("Actions")
                            )
                        ),
                        Tbody(
                            *[
                                Tr(
                                    Td(s.schedule_id),
                                    Td(s.route),
                                    Td(f"{s.ticket_price} Baht"),
                                    Td(Button("Select", onclick=f"window.location.href='/select_bus?schedule_id={s.schedule_id}'"))
                                ) for s in company.schedules
                            ]
                        )
                    ),
                    Footer(
                        Button("Logout", onclick="window.location.href='/logout'", class_="contrast")
                    )
                )
            )
        )
    else:
        return Html(
            Head(
                Link(rel="stylesheet", href="/static/styles.css")
            ),
            Body(
                Main(
                    Header(
                        H1("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏´‡πâ‡∏≠ ‡∏ö‡∏Ç‡∏™‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ üöå")
                    ),
                    Section(
                        Button("HOME"),
                        Button("LOGIN", onclick="window.location.href='/login'"),
                        Button("REGISTER", onclick="window.location.href='/register'"),
                    )
                )
            )
        )

@rt("/register")
def register():
    return Html(
        Head(Link(rel="stylesheet", href="/static/styles.css")),
        Body(
            Main(
                H2("Register"),
                Form(
                    Input(type="text", name="user_name", placeholder="Full Name", required=True),
                    Input(type="password", name="password", placeholder="Password", required=True),
                    Button("Sign Up", type="submit"),
                    method="post", action="/process_register"
                )
            )
        )
    )


@rt("/process_register")
def process_register(user_name: str = None, password: str = None):
    if not user_name or not password:
        return Html(Body(P("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"), A("Try Again", href="/register")))
    
    existing_user = company.get_customer_by_name(user_name)
    if existing_user:
        return Html(Body(P("‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"), A("Try Again", href="/register")))
    
    user_id = company.add_customer(user_name, password)
    return Html(Body(P(f"‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ID: {user_id}"), A("Go to Login", href="/login")))

@rt("/login")
def login():
    return Html(
        Body(
            H2("Login"),
            Form(
                Input(type="text", name="user_name", placeholder="User Name", required=True),
                Input(type="password", name="password", placeholder="Password", required=True),
                Button("Login", type="submit"),
                method="post", action="/process_login"
            )
        )
    )

@rt("/process_login")
def process_login(user_name: str = None, password: str = None):
    if not user_name or not password:
        return Html(Body(P("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"), A("Try Again", href="/login")))
    
    user = company.authenticate(user_name, password)
    if user:
        session["user_name"] = user.user_name
        session["user_id"] = user.user_id
        return Html(Body(P(f"‚úÖ Login Successful! Welcome {user.user_name}"), A("Go to Home", href="/")))
    else:
        return Html(Body(P("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"), A("Try Again", href="/login")))

@rt("/login")
def login():
    return Html(
        Head(Link(rel="stylesheet", href="/static/styles.css")),
        Body(
            Main(
                H2("Login"),
                Form(
                    Input(type="text", name="user_name", placeholder="User Name", required=True),
                    Input(type="password", name="password", placeholder="Password", required=True),
                    Button("Login", type="submit"),
                    method="post", action="/process_login"
                )
            )
        )
    )

@rt("/select_bus")
def select_bus(schedule_id: str = None):
    schedule = company.schedule_select(schedule_id)
    if not schedule:
        return Html(Body(P("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏ñ!"), A("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/")))

    return Html(
        Head(Link(rel="stylesheet", href="/static/styles.css")),
        Body(
            Main(
                H2(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á {schedule.route}"),
                Table(
                    Tr(Th("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ"), Th("‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á"), Th("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")),
                    *[
                        Tr(
                            Td(b.bus_name),
                            Td(f"{b.available_seat} seats"),
                            Td(Button("Select", onclick=f"window.location.href='/select_seat?schedule_id={schedule_id}&bus_plate={b.license_plate}'"))
                        )
                        for b in schedule.buses
                    ]
                ),
                A("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", href="/")
            )
        )
    )


@rt("/select_seat")
def select_seat(schedule_id: str = None, bus_plate: str = None):
    if "user_name" not in session:
        return Html(
            Head(Link(rel="stylesheet", href="/static/styles.css")),
            Body(P("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞"), A("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Login", href="/login"))
        )

    bus = company.get_bus(schedule_id, bus_plate)
    if not bus:
        return Html(
            Head(Link(rel="stylesheet", href="/static/styles.css")),
            Body(P("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"), A("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/"))
        )

    return Html(
        Head(Link(rel="stylesheet", href="/static/styles.css")),
        Body(
            Main(
                H2(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {bus.bus_name}"),
                Table(
                    Tr(*[
                        Td(Button(str(seat), onclick=f"window.location.href='/book_seat?schedule_id={schedule_id}&bus_plate={bus_plate}&seat_number={seat}'"))
                        for seat in bus.seat_list
                    ]),
                ),
                A("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", href=f"/select_bus?schedule_id={schedule_id}")
            )
        )
    )


@rt("/book_seat")
def book_seat(schedule_id: str = None, bus_plate: str = None, seat_number: int = None):
    if "user_name" not in session:
        return Html(Body(P("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞"), A("Go to Login", href="/login")))

    customer_id = session.get("user_id")
    booking_message = company.book_seat(customer_id, schedule_id, bus_plate, seat_number)

    return Html(Body(
        P(booking_message),
        Div(A("Go to Home", href="/")),
        Div(A("Payment", href="/pay_booking"), style="margin-top: 20px;")
    ))
@rt("/pay_booking")
def pay_booking():
    """ Display payment details """
    if "user_name" not in session:
        return Html(Body(P("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞"), A("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Login", href="/login")))

    customer = company.get_customer_by_name(session.get("user_name"))

    if not customer or not customer.bookings:
        return Html(Body(P("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"), A("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/")))

    return Html(
        Body(
            H2("üí∞ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞"),
            Table(
                Tr(Th("Bus Name"), Th("Seat Number"), Th("Amount"), Th("Action")),
                *[
                    Tr(
                        Td(booking.bus.bus_name),
                        Td(booking.seat_number),
                        Td(f"{company.schedule_select(bus_plate=booking.bus.license_plate).ticket_price} Baht"),
                        Td(Button("üõí ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", onclick=f"window.location.href='/process_payment?seat_number={booking.seat_number}'"))
                    ) for booking in customer.bookings
                ]
            ),
            A("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", href="/")
        )
    )

@rt("/process_payment")
def process_payment(seat_number: int = None):
    """ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß """
    if "user_name" not in session:
        return Html(Body(P("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞"), A("Go to Login", href="/login")))

    customer_id = session.get("user_id")
    ticket, message = company.process_payment(customer_id, seat_number)

    if not ticket:
        return Html(Body(P(message), A("Go Back", href="/pay_booking")))

    return Html(
        Body(
            H2("‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"),
            P(f"‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á {ticket.booking.seat_number} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"),
            P(f"üéüÔ∏è Ticket ID: {ticket.ticket_id}"),
            P(f"üìÖ ‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠: {ticket.issued_date}"),
            A("üìÑ ‡∏î‡∏π‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", href="/view_tickets"),
            A("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/")
        )
    )

@rt("/refund_ticket")
def refund_ticket(ticket_id: str = None):
    """ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô """
    if "user_name" not in session:
        return Html(Body(P("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞"), A("Go to Login", href="/login")))

    customer_id = session.get("user_id")
    ticket, message = company.refund_ticket(customer_id, ticket_id)

    if not ticket:
        return Html(Body(P(message), A("Go Back", href="/view_tickets")))
    remaining_tickets = company.view_ticket()
    if not remaining_tickets:
        return Html(Body(
            H2("üéüÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"),
            P("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
            A("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/")
        ))

    return Html(
        Body(
            H2("‚úÖ ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"),
            P(f"üéüÔ∏è Ticket ID: {ticket.ticket_id} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß"),
            A("üìÑ ‡∏î‡∏π‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", href="/view_tickets"),
            A("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/")
        )
    )

@rt("/view_tickets")
def view_tickets():
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ """
    if "user_name" not in session:
        return Html(Body(P("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞"), A("Go to Login", href="/login")))

    tickets = company.view_ticket()

    if not tickets:
        return Html(Body(
            H2("üéüÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"),
            P("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
            A("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/")
        ))

    return Html(
        Body(
            H2("üéüÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"),
            Table(
                Tr(Th("Ticket ID"), Th("Seat Number"), Th("Issued Date"), Th("Action")),
                *[
                    Tr(
                        Td(ticket.split(", ")[0]),  
                        Td(ticket.split(", ")[1]), 
                        Td(ticket.split(", ")[2]),  
                        Td(Button("üîÑ ‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", onclick=f"window.location.href='/refund_ticket?ticket_id={ticket.split(', ')[0]}'"))
                    ) for ticket in tickets
                ]
            ),
            A("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", href="/")
        )
    )

serve()